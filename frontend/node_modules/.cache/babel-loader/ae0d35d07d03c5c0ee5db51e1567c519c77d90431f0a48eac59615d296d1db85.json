{"ast":null,"code":"var _jsxFileName = \"/Users/f.f/Contracts/my-dapp/frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport SuperSlotArtifact from './artifacts/SuperSlot.json';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x406234D961194Ea1062fac91Fc569B30e7C2Ab56\";\nfunction App() {\n  _s();\n  const [contract, setContract] = useState(null);\n  const [prizePool, setPrizePool] = useState('0');\n  const [slots, setSlots] = useState(['', '', '', '']);\n  const [spinning, setSpinning] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const init = async () => {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          const provider = new ethers.BrowserProvider(window.ethereum);\n          const signer = await provider.getSigner();\n          const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, SuperSlotArtifact.abi, signer);\n          setContract(contractInstance);\n          updatePrizePool(contractInstance);\n        } catch (err) {\n          setError('Failed to connect to Ethereum network');\n          console.error(err);\n        }\n      } else {\n        setError('Ethereum wallet not detected');\n      }\n    };\n    init();\n  }, []);\n  const updatePrizePool = async contractInstance => {\n    try {\n      const pool = await contractInstance.getPrizePool();\n      setPrizePool(ethers.formatEther(pool));\n    } catch (err) {\n      setError('Failed to fetch prize pool');\n      console.error(err);\n    }\n  };\n  const spin = async () => {\n    if (contract) {\n      try {\n        setSpinning(true);\n        const tx = await contract.spin({\n          value: ethers.parseEther('0.001')\n        });\n        await tx.wait();\n        contract.on('Spin', (player, result, winAmount) => {\n          setSlots(result);\n          updatePrizePool(contract);\n          setSpinning(false);\n          if (winAmount > 0) {\n            alert(`Congratulations! You won ${ethers.formatEther(winAmount)} ETH!`);\n          }\n        });\n      } catch (err) {\n        setError('Failed to spin');\n        console.error(err);\n        setSpinning(false);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Super Slot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Prize Pool: \", prizePool, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slot-machine\",\n      children: slots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slot\",\n        children: spinning ? '?' : slot\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: spin,\n      disabled: spinning,\n      children: spinning ? 'Spinning...' : 'Spin (0.001 ETH)'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6SNQxy0tVc4wLtL8/yCg+WDUhXM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ethers","SuperSlotArtifact","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","App","_s","contract","setContract","prizePool","setPrizePool","slots","setSlots","spinning","setSpinning","error","setError","init","window","ethereum","request","method","provider","BrowserProvider","signer","getSigner","contractInstance","Contract","abi","updatePrizePool","err","console","pool","getPrizePool","formatEther","spin","tx","value","parseEther","wait","on","player","result","winAmount","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","slot","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/f.f/Contracts/my-dapp/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport SuperSlotArtifact from './artifacts/SuperSlot.json';\nimport './App.css';\n\nconst CONTRACT_ADDRESS = \"0x406234D961194Ea1062fac91Fc569B30e7C2Ab56\";\n\nfunction App() {\n  const [contract, setContract] = useState<ethers.Contract | null>(null);\n  const [prizePool, setPrizePool] = useState<string>('0');\n  const [slots, setSlots] = useState<string[]>(['', '', '', '']);\n  const [spinning, setSpinning] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const init = async () => {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' });\n          const provider = new ethers.BrowserProvider(window.ethereum);\n          const signer = await provider.getSigner();\n          const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, SuperSlotArtifact.abi, signer);\n          setContract(contractInstance);\n          updatePrizePool(contractInstance);\n        } catch (err) {\n          setError('Failed to connect to Ethereum network');\n          console.error(err);\n        }\n      } else {\n        setError('Ethereum wallet not detected');\n      }\n    };\n    init();\n  }, []);\n\n  const updatePrizePool = async (contractInstance: ethers.Contract) => {\n    try {\n      const pool = await contractInstance.getPrizePool();\n      setPrizePool(ethers.formatEther(pool));\n    } catch (err) {\n      setError('Failed to fetch prize pool');\n      console.error(err);\n    }\n  };\n\n  const spin = async () => {\n    if (contract) {\n      try {\n        setSpinning(true);\n        const tx = await contract.spin({ value: ethers.parseEther('0.001') });\n        await tx.wait();\n        contract.on('Spin', (player, result, winAmount) => {\n          setSlots(result);\n          updatePrizePool(contract);\n          setSpinning(false);\n          if (winAmount > 0) {\n            alert(`Congratulations! You won ${ethers.formatEther(winAmount)} ETH!`);\n          }\n        });\n      } catch (err) {\n        setError('Failed to spin');\n        console.error(err);\n        setSpinning(false);\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Super Slot</h1>\n      <h2>Prize Pool: {prizePool} ETH</h2>\n      <div className=\"slot-machine\">\n        {slots.map((slot, index) => (\n          <div key={index} className=\"slot\">\n            {spinning ? '?' : slot}\n          </div>\n        ))}\n      </div>\n      <button onClick={spin} disabled={spinning}>\n        {spinning ? 'Spinning...' : 'Spin (0.001 ETH)'}\n      </button>\n      {error && <p className=\"error\">Error: {error}</p>}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}