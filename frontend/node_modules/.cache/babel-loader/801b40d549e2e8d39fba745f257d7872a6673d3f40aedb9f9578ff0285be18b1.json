{"ast":null,"code":"var _jsxFileName = \"/Users/f.f/Contracts/my-dapp/frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport SuperSlotArtifact from './artifacts/SuperSlot.json';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONTRACT_ADDRESS = \"0x6da2F4963E3c936DfF4cea3a9a6C521807895C6E\";\nfunction App() {\n  _s();\n  const [contract, setContract] = useState(null);\n  const [prizePool, setPrizePool] = useState('0');\n  const [slots, setSlots] = useState(['', '', '', '']);\n  const [spinning, setSpinning] = useState(false);\n  const [error, setError] = useState(null);\n  const [allSlots, setAllSlots] = useState([]);\n  useEffect(() => {\n    const init = async () => {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          const provider = new ethers.BrowserProvider(window.ethereum);\n          const signer = await provider.getSigner();\n          const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, SuperSlotArtifact.abi, signer);\n          setContract(contractInstance);\n          updatePrizePool(contractInstance);\n          fetchAllSlots(contractInstance);\n        } catch (err) {\n          setError('Failed to connect to Ethereum network');\n          console.error(err);\n        }\n      } else {\n        setError('Ethereum wallet not detected');\n      }\n    };\n    init();\n  }, []);\n  const updatePrizePool = async contractInstance => {\n    try {\n      const pool = await contractInstance.getPrizePool();\n      setPrizePool(ethers.formatEther(pool));\n    } catch (err) {\n      setError('Failed to fetch prize pool');\n      console.error(err);\n    }\n  };\n  const fetchAllSlots = async contractInstance => {\n    try {\n      const slots = await contractInstance.getSlots();\n      setAllSlots(slots);\n    } catch (err) {\n      setError('Failed to fetch slot symbols');\n      console.error(err);\n    }\n  };\n  const spin = async () => {\n    if (contract) {\n      try {\n        setSpinning(true);\n        setSlots(['?', '?', '?', '?']);\n        const tx = await contract.spin({\n          value: ethers.parseEther('0.001')\n        });\n        const receipt = await tx.wait();\n        const event = receipt.logs.find(log => log.fragment.name === 'Spin');\n        if (event && event.args) {\n          const result = {\n            symbols: event.args.result,\n            winAmount: event.args.winAmount,\n            isWin: event.args.isWin\n          };\n          simulateSpinning(result);\n        } else {\n          throw new Error('Spin event not found in transaction receipt');\n        }\n      } catch (err) {\n        setError('Failed to spin');\n        console.error(err);\n        setSpinning(false);\n      }\n    }\n  };\n  const simulateSpinning = result => {\n    let spins = 0;\n    const spinInterval = setInterval(() => {\n      setSlots(slots.map(() => allSlots[Math.floor(Math.random() * allSlots.length)]));\n      spins++;\n      if (spins >= 20) {\n        clearInterval(spinInterval);\n        setSlots(result.symbols);\n        setSpinning(false);\n        updatePrizePool(contract);\n        if (result.isWin) {\n          alert(`Congratulations! You won ${ethers.formatEther(result.winAmount)} ETH!`);\n        }\n      }\n    }, 100);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Super Slot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Prize Pool: \", prizePool, \" ETH\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"slot-machine\",\n      children: slots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slot\",\n        children: slot\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: spin,\n      disabled: spinning,\n      children: spinning ? 'Spinning...' : 'Spin (0.001 ETH)'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UGSo1bEXepUR2OB0edzosYggrw8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ethers","SuperSlotArtifact","jsxDEV","_jsxDEV","CONTRACT_ADDRESS","App","_s","contract","setContract","prizePool","setPrizePool","slots","setSlots","spinning","setSpinning","error","setError","allSlots","setAllSlots","init","window","ethereum","request","method","provider","BrowserProvider","signer","getSigner","contractInstance","Contract","abi","updatePrizePool","fetchAllSlots","err","console","pool","getPrizePool","formatEther","getSlots","spin","tx","value","parseEther","receipt","wait","event","logs","find","log","fragment","name","args","result","symbols","winAmount","isWin","simulateSpinning","Error","spins","spinInterval","setInterval","map","Math","floor","random","length","clearInterval","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","slot","index","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/f.f/Contracts/my-dapp/frontend/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport SuperSlotArtifact from './artifacts/SuperSlot.json';\nimport './App.css';\n\nconst CONTRACT_ADDRESS = \"0x6da2F4963E3c936DfF4cea3a9a6C521807895C6E\";\n\ninterface SpinResult {\n  symbols: string[];\n  winAmount: bigint;\n  isWin: boolean;\n}\n\nfunction App() {\n  const [contract, setContract] = useState<ethers.Contract | null>(null);\n  const [prizePool, setPrizePool] = useState<string>('0');\n  const [slots, setSlots] = useState<string[]>(['', '', '', '']);\n  const [spinning, setSpinning] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [allSlots, setAllSlots] = useState<string[]>([]);\n\n  useEffect(() => {\n    const init = async () => {\n      if (typeof window.ethereum !== 'undefined') {\n        try {\n          await window.ethereum.request({ method: 'eth_requestAccounts' });\n          const provider = new ethers.BrowserProvider(window.ethereum);\n          const signer = await provider.getSigner();\n          const contractInstance = new ethers.Contract(CONTRACT_ADDRESS, SuperSlotArtifact.abi, signer);\n          setContract(contractInstance);\n          updatePrizePool(contractInstance);\n          fetchAllSlots(contractInstance);\n        } catch (err) {\n          setError('Failed to connect to Ethereum network');\n          console.error(err);\n        }\n      } else {\n        setError('Ethereum wallet not detected');\n      }\n    };\n    init();\n  }, []);\n\n  const updatePrizePool = async (contractInstance: ethers.Contract) => {\n    try {\n      const pool = await contractInstance.getPrizePool();\n      setPrizePool(ethers.formatEther(pool));\n    } catch (err) {\n      setError('Failed to fetch prize pool');\n      console.error(err);\n    }\n  };\n\n  const fetchAllSlots = async (contractInstance: ethers.Contract) => {\n    try {\n      const slots = await contractInstance.getSlots();\n      setAllSlots(slots);\n    } catch (err) {\n      setError('Failed to fetch slot symbols');\n      console.error(err);\n    }\n  };\n\n  const spin = async () => {\n    if (contract) {\n      try {\n        setSpinning(true);\n        setSlots(['?', '?', '?', '?']);\n        const tx = await contract.spin({ value: ethers.parseEther('0.001') });\n        const receipt = await tx.wait();\n        const event = receipt.logs.find((log: any) => log.fragment.name === 'Spin');\n        if (event && event.args) {\n          const result: SpinResult = {\n            symbols: event.args.result,\n            winAmount: event.args.winAmount,\n            isWin: event.args.isWin\n          };\n          simulateSpinning(result);\n        } else {\n          throw new Error('Spin event not found in transaction receipt');\n        }\n      } catch (err) {\n        setError('Failed to spin');\n        console.error(err);\n        setSpinning(false);\n      }\n    }\n  };\n\n  const simulateSpinning = (result: SpinResult) => {\n    let spins = 0;\n    const spinInterval = setInterval(() => {\n      setSlots(slots.map(() => allSlots[Math.floor(Math.random() * allSlots.length)]));\n      spins++;\n      if (spins >= 20) {\n        clearInterval(spinInterval);\n        setSlots(result.symbols);\n        setSpinning(false);\n        updatePrizePool(contract!);\n        if (result.isWin) {\n          alert(`Congratulations! You won ${ethers.formatEther(result.winAmount)} ETH!`);\n        }\n      }\n    }, 100);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Super Slot</h1>\n      <h2>Prize Pool: {prizePool} ETH</h2>\n      <div className=\"slot-machine\">\n        {slots.map((slot, index) => (\n          <div key={index} className=\"slot\">\n            {slot}\n          </div>\n        ))}\n      </div>\n      <button onClick={spin} disabled={spinning}>\n        {spinning ? 'Spinning...' : 'Spin (0.001 ETH)'}\n      </button>\n      {error && <p className=\"error\">Error: {error}</p>}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,iBAAiB,MAAM,4BAA4B;AAC1D,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,gBAAgB,GAAG,4CAA4C;AAQrE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAyB,IAAI,CAAC;EACtE,MAAM,CAACW,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAS,GAAG,CAAC;EACvD,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAC9D,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAU,KAAK,CAAC;EACxD,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAW,EAAE,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACd,MAAMoB,IAAI,GAAG,MAAAA,CAAA,KAAY;MACvB,IAAI,OAAOC,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;QAC1C,IAAI;UACF,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;YAAEC,MAAM,EAAE;UAAsB,CAAC,CAAC;UAChE,MAAMC,QAAQ,GAAG,IAAIxB,MAAM,CAACyB,eAAe,CAACL,MAAM,CAACC,QAAQ,CAAC;UAC5D,MAAMK,MAAM,GAAG,MAAMF,QAAQ,CAACG,SAAS,CAAC,CAAC;UACzC,MAAMC,gBAAgB,GAAG,IAAI5B,MAAM,CAAC6B,QAAQ,CAACzB,gBAAgB,EAAEH,iBAAiB,CAAC6B,GAAG,EAAEJ,MAAM,CAAC;UAC7FlB,WAAW,CAACoB,gBAAgB,CAAC;UAC7BG,eAAe,CAACH,gBAAgB,CAAC;UACjCI,aAAa,CAACJ,gBAAgB,CAAC;QACjC,CAAC,CAAC,OAAOK,GAAG,EAAE;UACZjB,QAAQ,CAAC,uCAAuC,CAAC;UACjDkB,OAAO,CAACnB,KAAK,CAACkB,GAAG,CAAC;QACpB;MACF,CAAC,MAAM;QACLjB,QAAQ,CAAC,8BAA8B,CAAC;MAC1C;IACF,CAAC;IACDG,IAAI,CAAC,CAAC;EACR,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMY,eAAe,GAAG,MAAOH,gBAAiC,IAAK;IACnE,IAAI;MACF,MAAMO,IAAI,GAAG,MAAMP,gBAAgB,CAACQ,YAAY,CAAC,CAAC;MAClD1B,YAAY,CAACV,MAAM,CAACqC,WAAW,CAACF,IAAI,CAAC,CAAC;IACxC,CAAC,CAAC,OAAOF,GAAG,EAAE;MACZjB,QAAQ,CAAC,4BAA4B,CAAC;MACtCkB,OAAO,CAACnB,KAAK,CAACkB,GAAG,CAAC;IACpB;EACF,CAAC;EAED,MAAMD,aAAa,GAAG,MAAOJ,gBAAiC,IAAK;IACjE,IAAI;MACF,MAAMjB,KAAK,GAAG,MAAMiB,gBAAgB,CAACU,QAAQ,CAAC,CAAC;MAC/CpB,WAAW,CAACP,KAAK,CAAC;IACpB,CAAC,CAAC,OAAOsB,GAAG,EAAE;MACZjB,QAAQ,CAAC,8BAA8B,CAAC;MACxCkB,OAAO,CAACnB,KAAK,CAACkB,GAAG,CAAC;IACpB;EACF,CAAC;EAED,MAAMM,IAAI,GAAG,MAAAA,CAAA,KAAY;IACvB,IAAIhC,QAAQ,EAAE;MACZ,IAAI;QACFO,WAAW,CAAC,IAAI,CAAC;QACjBF,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;QAC9B,MAAM4B,EAAE,GAAG,MAAMjC,QAAQ,CAACgC,IAAI,CAAC;UAAEE,KAAK,EAAEzC,MAAM,CAAC0C,UAAU,CAAC,OAAO;QAAE,CAAC,CAAC;QACrE,MAAMC,OAAO,GAAG,MAAMH,EAAE,CAACI,IAAI,CAAC,CAAC;QAC/B,MAAMC,KAAK,GAAGF,OAAO,CAACG,IAAI,CAACC,IAAI,CAAEC,GAAQ,IAAKA,GAAG,CAACC,QAAQ,CAACC,IAAI,KAAK,MAAM,CAAC;QAC3E,IAAIL,KAAK,IAAIA,KAAK,CAACM,IAAI,EAAE;UACvB,MAAMC,MAAkB,GAAG;YACzBC,OAAO,EAAER,KAAK,CAACM,IAAI,CAACC,MAAM;YAC1BE,SAAS,EAAET,KAAK,CAACM,IAAI,CAACG,SAAS;YAC/BC,KAAK,EAAEV,KAAK,CAACM,IAAI,CAACI;UACpB,CAAC;UACDC,gBAAgB,CAACJ,MAAM,CAAC;QAC1B,CAAC,MAAM;UACL,MAAM,IAAIK,KAAK,CAAC,6CAA6C,CAAC;QAChE;MACF,CAAC,CAAC,OAAOxB,GAAG,EAAE;QACZjB,QAAQ,CAAC,gBAAgB,CAAC;QAC1BkB,OAAO,CAACnB,KAAK,CAACkB,GAAG,CAAC;QAClBnB,WAAW,CAAC,KAAK,CAAC;MACpB;IACF;EACF,CAAC;EAED,MAAM0C,gBAAgB,GAAIJ,MAAkB,IAAK;IAC/C,IAAIM,KAAK,GAAG,CAAC;IACb,MAAMC,YAAY,GAAGC,WAAW,CAAC,MAAM;MACrChD,QAAQ,CAACD,KAAK,CAACkD,GAAG,CAAC,MAAM5C,QAAQ,CAAC6C,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG/C,QAAQ,CAACgD,MAAM,CAAC,CAAC,CAAC,CAAC;MAChFP,KAAK,EAAE;MACP,IAAIA,KAAK,IAAI,EAAE,EAAE;QACfQ,aAAa,CAACP,YAAY,CAAC;QAC3B/C,QAAQ,CAACwC,MAAM,CAACC,OAAO,CAAC;QACxBvC,WAAW,CAAC,KAAK,CAAC;QAClBiB,eAAe,CAACxB,QAAS,CAAC;QAC1B,IAAI6C,MAAM,CAACG,KAAK,EAAE;UAChBY,KAAK,CAAC,4BAA4BnE,MAAM,CAACqC,WAAW,CAACe,MAAM,CAACE,SAAS,CAAC,OAAO,CAAC;QAChF;MACF;IACF,CAAC,EAAE,GAAG,CAAC;EACT,CAAC;EAED,oBACEnD,OAAA;IAAKiE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBlE,OAAA;MAAAkE,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBtE,OAAA;MAAAkE,QAAA,GAAI,cAAY,EAAC5D,SAAS,EAAC,MAAI;IAAA;MAAA6D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpCtE,OAAA;MAAKiE,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1B1D,KAAK,CAACkD,GAAG,CAAC,CAACa,IAAI,EAAEC,KAAK,kBACrBxE,OAAA;QAAiBiE,SAAS,EAAC,MAAM;QAAAC,QAAA,EAC9BK;MAAI,GADGC,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNtE,OAAA;MAAQyE,OAAO,EAAErC,IAAK;MAACsC,QAAQ,EAAEhE,QAAS;MAAAwD,QAAA,EACvCxD,QAAQ,GAAG,aAAa,GAAG;IAAkB;MAAAyD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC,EACR1D,KAAK,iBAAIZ,OAAA;MAAGiE,SAAS,EAAC,OAAO;MAAAC,QAAA,GAAC,SAAO,EAACtD,KAAK;IAAA;MAAAuD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV;AAACnE,EAAA,CA9GQD,GAAG;AAAAyE,EAAA,GAAHzE,GAAG;AAgHZ,eAAeA,GAAG;AAAC,IAAAyE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}