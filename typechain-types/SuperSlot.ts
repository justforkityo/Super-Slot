/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SuperSlot {
  export type SpinResultStruct = {
    symbols: [string, string, string, string];
    winAmount: BigNumberish;
    isWin: boolean;
  };

  export type SpinResultStructOutput = [
    symbols: [string, string, string, string],
    winAmount: bigint,
    isWin: boolean
  ] & {
    symbols: [string, string, string, string];
    winAmount: bigint;
    isWin: boolean;
  };
}

export interface SuperSlotInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BET_AMOUNT"
      | "getPrizePool"
      | "getSlots"
      | "owner"
      | "prizePool"
      | "slots"
      | "spin"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Spin"): EventFragment;

  encodeFunctionData(
    functionFragment: "BET_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrizePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSlots", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "prizePool", values?: undefined): string;
  encodeFunctionData(functionFragment: "slots", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "spin", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BET_AMOUNT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPrizePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSlots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prizePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spin", data: BytesLike): Result;
}

export namespace SpinEvent {
  export type InputTuple = [
    player: AddressLike,
    result: [string, string, string, string],
    winAmount: BigNumberish,
    isWin: boolean
  ];
  export type OutputTuple = [
    player: string,
    result: [string, string, string, string],
    winAmount: bigint,
    isWin: boolean
  ];
  export interface OutputObject {
    player: string;
    result: [string, string, string, string];
    winAmount: bigint;
    isWin: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SuperSlot extends BaseContract {
  connect(runner?: ContractRunner | null): SuperSlot;
  waitForDeployment(): Promise<this>;

  interface: SuperSlotInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BET_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  getPrizePool: TypedContractMethod<[], [bigint], "view">;

  getSlots: TypedContractMethod<[], [string[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  prizePool: TypedContractMethod<[], [bigint], "view">;

  slots: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  spin: TypedContractMethod<[], [SuperSlot.SpinResultStructOutput], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BET_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrizePool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSlots"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "prizePool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "slots"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "spin"
  ): TypedContractMethod<[], [SuperSlot.SpinResultStructOutput], "payable">;

  getEvent(
    key: "Spin"
  ): TypedContractEvent<
    SpinEvent.InputTuple,
    SpinEvent.OutputTuple,
    SpinEvent.OutputObject
  >;

  filters: {
    "Spin(address,string[4],uint256,bool)": TypedContractEvent<
      SpinEvent.InputTuple,
      SpinEvent.OutputTuple,
      SpinEvent.OutputObject
    >;
    Spin: TypedContractEvent<
      SpinEvent.InputTuple,
      SpinEvent.OutputTuple,
      SpinEvent.OutputObject
    >;
  };
}
